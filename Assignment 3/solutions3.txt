/////////////////////////  Question 1 source file ////////////////////////

/* File: complexstd.cpp
   Use the standard complex class
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        September 29, 2017
*/

#include <iostream>
#include <fstream>
#include <complex>

using namespace std;

int main(void)
{
	complex<float> a, b, c;
	
	cout << "Enter two complex numbers in the form (re, im): ";
	cin >> a >> b;
	
	c = a + b;
	cout << "The sum of " << a << " and " << b << " is " << c << endl;
	
	c = a - b;
	cout << "The difference of " << a << " and " << b << " is " << c << endl;
	
	c = a * b;
	cout << "The product of " << a << " and " << b << " is " << c << endl;
	
	c = a / b;
	cout << "The division of " << a << " and " << b << " is " << c << endl;
	
	return 0;
}

/////////////////////////  Question 1 output file /////////////////////////

Enter two complex numbers in the form (re, im): (2,4) (1,-1)
The sum of (2,4) and (1,-1) is (3,3)
The difference of (2,4) and (1,-1) is (1,5)
The product of (2,4) and (1,-1) is (6,2)
The division of (2,4) and (1,-1) is (-1,3)

--------------------------------
Process exited after 20.12 seconds with return value 0
Press any key to continue . . .

/////////////////////////  Question 2 source file ////////////////////////

/* File: complexnumbers.cpp
   Implement complex numbers as a class using operators 
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        September 29, 2017
*/

#include <iostream>
#include <fstream>

using namespace std;

class complex {
private:
	float x; // real part
	float y; // imaginary part
	
public:
	complex(float re = 0.0, float im = 0.0); // constructor
	float real(void) const; // return real part
	float imag(void) const; // return imag part
	void real(float re); // set real part
	void imag(float im); // set imag part
};

////////////////////// prototypes of complex operators //////////////////////

istream& operator>> (istream &in, complex &a);   // read a complex number in the form (x,y)
ostream& operator<< (ostream &out, const complex &a);  // write a complex number in the form (x,y)
complex operator+ (const complex &a, const complex &b); // return the sum
complex operator- (const complex &a, const complex &b); // return the difference
complex operator* (const complex &a, const complex &b); // return the product
complex operator/ (const complex &a, const complex &b); // return the quotient

int main(void)
{
	complex a, b, c;

	cout << "Enter two complex numbers in the form (re, im): ";
	cin >> a >> b;

	c = a + b;
	cout << "The sum of " << a << " and " << b << " is " << c << endl;

	c = a - b;
	cout << "The difference of " << a << " and " << b << " is " << c << endl;

	c = a * b;
	cout << "The product of " << a << " and " << b << " is " << c << endl;

	c = a / b;
	cout << "The division of " << a << " and " << b << " is " << c << endl;

	return 0;
}

///////////////////////// implementation of complex ////////////////////

complex::complex(float re, float im)
{
	x = re;
	y = im;
}

float complex::real(void) const
{
	return x;
}

float complex::imag(void) const
{
	return y;
}

void complex::real(float re)
{
	x = re;
}

void complex::imag(float im)
{
	y = im;
}

//////////////////////// implementation of complex operators /////////////

istream& operator>> (istream &in, complex &a)
{
	char discard;
	float h, v;
	in >> discard >> h >> discard >> v >> discard;
	a.real(h);
	a.imag(v);
	return in;
}

ostream& operator<< (ostream &out, const complex &a)
{
	out << "(" << a.real() << "," << a.imag() << ")";
	return out;
}

complex operator + (const complex &a, const complex &b){
	complex s;
	s.real(a.real() + b.real());
	s.imag(a.imag() + b.imag());
	return s;
}

complex operator - (const complex &a, const complex &b){
	complex s;
	s.real(a.real() - b.real());
	s.imag(a.imag() - b.imag());
	return s;
}

complex operator * (const complex &a, const complex &b){
	complex s;
	s.real(a.real()*b.real() - a.imag()*b.imag());
	s.imag(a.real()*b.imag() + a.imag()*b.real());
	return s;
}

complex operator / (const complex &a, const complex &b){
	complex s;
	s.real((a.real()*b.real() + a.imag()*b.imag()) / (b.real()*b.real() + b.imag()*b.imag()));
	s.imag((a.imag()*b.real() - a.real()*b.imag()) / (b.real()*b.real() + b.imag()*b.imag()));
	return s;
}

/////////////////////////  Question 2 output  ////////////////////////////

Enter two complex numbers in the form (re, im): (2,4) (1,-1)
The sum of (2,4) and (1,-1) is (3,3)
The difference of (2,4) and (1,-1) is (1,5)
The product of (2,4) and (1,-1) is (6,2)
The division of (2,4) and (1,-1) is (-1,3)

--------------------------------
Process exited after 22.42 seconds with return value 0
Press any key to continue . . .

/////////////////////////  Question 3 source file ////////////////////////

/* File: time24big3.cpp
   the class time24 represents time on 24 hour clock
   times are written to a stream in the form hour:minute
   the big 3 methods are implemented
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        September 29, 2017: 
*/

#include <iostream>
#include <fstream>

using namespace std;

class time24 {
private:
	int hour_; // hour between 0 and 23
	int minute_; // minute between 0 and 59

public:
	time24(int h = 0 , int m = 0); // constructor with default args
	
	/* big 3 prototypes here */
	time24(const time24 &other);
	~time24(void);
	time24& operator = (const time24 &rhs);
	
	void write(ostream& out) const; // prints hour:minute to out
};

int main (void) // test the class
{
	time24 x(18, 34);
	time24 y(x);
	time24 z;
	time24* p;
	
	p = new time24(5,8);
	
	cout << "The time x is: ";
	x.write(cout);
	
	cout << "The time y is: ";
	y.write(cout);
	
	cout << "The time z is: ";
	z.write(cout);
	
	cout << "The time *p is: ";
	p->write(cout);
	
	z = x = *p;
	cout << "The time z is: ";
	z.write(cout);
	
	x = x; // nothing should be printed
	
	delete p;
	
	return 0;
}

//////////////////// Implementation of time24 ///////////////////////////

time24::time24(int h, int m)
{
	hour_ = h;
	minute_ = m;
	cout << "constructing: ";
	write(cout);
}

/* put big 3 implementations here */

time24::time24(const time24 &other)
{
	hour_ = other.hour_;
	minute_ = other.minute_;
	cout << "copying: ";
	write(cout);
}

time24::~time24(void)
{
	cout << "destroying: ";
	write(cout);
}

time24& time24::operator = (const time24 &rhs)
{
	if(this != &rhs) {
		hour_ = rhs.hour_;
		minute_ = rhs.minute_;
		cout << "assigning: ";
		write(cout);
	}
	return *this;
}

void time24::write(ostream& out) const
{
	out << hour_ /10 << hour_ % 10 << ":" << minute_ / 10 << minute_ %10;
	out << " stored at address " << this << endl;
}

/////////////////////////  Question 3 output file ////////////////////////

constructing: 18:34 stored at address 0x6ffe30
copying: 18:34 stored at address 0x6ffe20
constructing: 00:00 stored at address 0x6ffe10
constructing: 05:08 stored at address 0x825ea0
The time x is: 18:34 stored at address 0x6ffe30
The time y is: 18:34 stored at address 0x6ffe20
The time z is: 00:00 stored at address 0x6ffe10
The time *p is: 05:08 stored at address 0x825ea0
assigning: 05:08 stored at address 0x6ffe30
assigning: 05:08 stored at address 0x6ffe10
The time z is: 05:08 stored at address 0x6ffe10
destroying: 05:08 stored at address 0x825ea0
destroying: 05:08 stored at address 0x6ffe10
destroying: 18:34 stored at address 0x6ffe20
destroying: 05:08 stored at address 0x6ffe30

--------------------------------
Process exited after 0.08924 seconds with return value 0
Press any key to continue . . .

