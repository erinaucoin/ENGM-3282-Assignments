/*********************** Question 1 source file ********************/

/* File: employeetypes.cpp
   Program to illustrate derived classes.
 
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        November 2, 2017
*/

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class employee {
private:
    string name;  // last name
    int id;       // employee id number
    float salary; // employee salary
    
public:
    employee(string n="none", int i=0, float s=0.0);
    void write(ostream &out);
    void read(istream &in);
};

class manager : public employee {  
private:
    string title;       // vice-president etc
public:
    manager(string n="none", int i=0, float s=0.0, string t="none");
    void write(ostream &out);
    void read(istream &in);
};

class scientist : public employee{  
private:
    int pubs;           // number of publications

public:
    scientist(string n="none", int i=0, float s=0.0, int p=0);
    void write(ostream &out);
    void read(istream &in);
};

class labourer : public employee {    
private:
    string dept;
      
public:
    labourer(string n="none", int i=0, float s=0.0, string d="none");
    void write(ostream &out);
    void read(istream &in);
};

int main()
{
    string type;            // employee type
    ofstream fout ("employeetypesout.txt");

    while(1) { // loop until break occurs
        cout << "\n\nType of employee: "; cin >> type;
        if (type == "q") break;

        if(type == "labourer") {     
            labourer lab;
            lab.read(cin);

            cout << "\n";
            lab.write(cout);
            fout << "\n";
            lab.write(fout);

        } else if (type == "scientist") { 
            scientist sci;
            sci.read(cin);

            cout << "\n";
            sci.write(cout);
            fout << "\n";
            sci.write(fout);

        } else if (type == "manager") {        
            manager man;
            man.read(cin);

            cout << "\n";
            man.write(cout);
            fout << "\n";
            man.write(fout);

        }        
   }
   fout.close();   
   return 0;
}

///////////////// Member functions of employee /////////////////////////////

employee::employee(string n, int i, float s)
{
    name = n;
    id = i;
    salary = s;
}
void employee::write(ostream &out)
{

    out << "name  : " << name <<   "\n";
    out << "id    : " << id  <<    "\n";
    out << "salary: " << salary << "\n";
}
void employee::read(istream &in)
{
    if(in == cin) { // give a prompt to the user
        cout << "name  : ";
    }
    in >> name;

    if(in == cin) { // give a prompt to the user
        cout << "id  : ";
    }
    in >> id;
    
    if(in == cin) { // give a prompt to the user
        cout << "salary: ";
    }
    in >> salary;
}      
//////////////////// Member functions of labourer /////////////////////////

labourer::labourer(string n, int i, float s, string d) : employee(n, i, s)
{
	dept = d;
}

void labourer::write(ostream& out)
{
	employee::write(out);
	out << "department : " << dept << "\n"; 
}

void labourer::read(istream& in)
{
	employee::read(in);
	if(in==cin){
		cout <<"department : ";
	}
	in >> dept;
}

//////////////////// Member functions of manager ///////////////////////////

manager::manager(string n, int i, float s, string t) : employee(n, i, s)
{
	title = t;
}

void manager::write(ostream& out)
{
	employee::write(out);				// prints name, id and salary
	out << "title : " << title << "\n";	//prints title
}

void manager::read(istream& in)
{
	employee::read(in);
	if(in==cin){
		cout << "title : ";
	}
	in >> title;
}

//////////////////// Member functions of scientist ////////////////////////

scientist::scientist(string n, int i, float s, int p)
{
	pubs = p;
}

void scientist::write(ostream& out)
{
	employee::write(out);
	out << "number of publications : " << pubs << "\n"; 
}

void scientist::read(istream& in)
{
	employee::read(in);
	if(in==cin){
		cout <<"number of publications : ";
	}
	in >> pubs;
}

/*********************** Question 1 output file ********************/

////////////////////////     Screen Output      \\\\\\\\\\\\\\\\\\\\\

Type of employee: labourer
name  : white
id  : 3434
salary: 41000
department : shipping

name  : white
id    : 3434
salary: 41000
department : shipping


Type of employee: manager
name  : black
id  : 565
salary: 54000
title : accountsmanager

name  : black
id    : 565
salary: 54000
title : accountsmanager


Type of employee: scientist
name  : Green
id  : 234
salary: 79000
number of publications : 23

name  : Green
id    : 234
salary: 79000
number of publications : 23


Type of employee: q

--------------------------------
Process exited after 83.64 seconds with return value 0
Press any key to continue . . .

////////////////////////      File Output       \\\\\\\\\\\\\\\\\\\\\

name  : white
id    : 3434
salary: 41000
department : shipping

name  : black
id    : 565
salary: 54000
title : accountsmanager

name  : Green
id    : 234
salary: 79000
number of publications : 23

/*********************** Question 2 source file ********************/

/* File: accountwrite.cpp
   Shows how to derive classes.
 
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        November 2, 2017
*/

#include <iostream>
#include <string>
using namespace std;

class account {
private:
    string owner;
    float balance;
    float withdrawfee;
   
public:
    account(string name, float fee);
    void write(ostream &out);
    void deposit(float amount); 
    bool withdraw(float amount);
    float getbalance(void);
    float getwithdrawfee(void);
};

class savingsaccount : public account {
private:
    float interestrate;  

public:
    savingsaccount(string name, float fee, float rate);
    void write(ostream &out);
    void addinterest(void);
};

class chequingaccount : public account {
private:
    int remainingfreewithdrawals;  

public:
    chequingaccount(string name, float fee, int numberfree);
    void write(ostream &out);
    bool withdraw(float amount);
};


int main(void)
{
    savingsaccount s("joe", 0.50, 0.02);
    chequingaccount c("bob", 0.50, 2);

    s.deposit(100.);
    c.deposit(100.);

    cout << "savings account: \n";
    s.write(cout);
    cout << "\nchequing account: \n";
    c.write(cout);
   
    s.withdraw(10.);
    s.withdraw(5.);
    s.withdraw(20.0);
    s.addinterest();

    cout << "\nsavings account: \n";
    s.write(cout);

    c.withdraw(10.);
    c.withdraw(5.);
    c.withdraw(20.0);

    cout << "\nchequing account: \n";
    c.write(cout);

   return 0;
}

///////////////////// implementation of account ///////////////////////
account::account(string name, float fee)
{
    owner = name;
    balance = 0;
    withdrawfee = fee;
}

void account::write(ostream &out)
{
    out << "owner: " << owner << "\n";
    out << "balance: " << balance << "\n";
    out << "withdrawfee " << withdrawfee << "\n"; 
}

void account::deposit(float amount)
{
    balance = balance + amount;
}

bool account::withdraw(float amount)
{
    bool result;
    if (amount > balance-withdrawfee) { 
        cout << "Insufficient funds"; 
        result = false;
    } else { 
        balance = balance - amount - withdrawfee;
        result = true;
    }

    return result;
}

float account::getbalance(void)
{
    return balance;
}

float account::getwithdrawfee(void)
{
    return withdrawfee;
}

///////////////////// implementation of savingsaccount ///////////////////////

savingsaccount::savingsaccount(string name, float fee, float rate) : account(name, fee)
{
	interestrate = rate;
}

void savingsaccount::write(ostream& out)
{
	account::write(out);
	out << "interest rate: " << interestrate << endl;
}

void savingsaccount::addinterest(void)
{
	deposit(getbalance() * interestrate);
}

///////////////////// implementation of chequingaccount ///////////////////////

chequingaccount::chequingaccount(string name, float fee, int numberfree) : account(name, fee)
{
	remainingfreewithdrawals = numberfree;
}

void chequingaccount::write(ostream& out)
{
	account::write(out);
	out << "remaining free withdrawals: " << remainingfreewithdrawals << endl;	
}

bool chequingaccount::withdraw(float amount)
{
	if(remainingfreewithdrawals > 0) {
		remainingfreewithdrawals--;
		return(account::withdraw( amount - getwithdrawfee() ));
	}
	else{
		return(account::withdraw(amount));
	}
}

/*********************** Question 2 output file ********************/

savings account:
owner: joe
balance: 100
withdrawfee 0.5
interest rate: 0.02

chequing account:
owner: bob
balance: 100
withdrawfee 0.5
remaining free withdrawals: 2

savings account:
owner: joe
balance: 64.77
withdrawfee 0.5
interest rate: 0.02

chequing account:
owner: bob
balance: 64.5
withdrawfee 0.5
remaining free withdrawals: 0

--------------------------------
Process exited after 0.02614 seconds with return value 0
Press any key to continue . . .

/*********************** Question 3 source file ********************/

/* File: accountsavingsplus.cpp
   Shows how to derive classes.
 
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        November 2, 2017
*/

#include <iostream>
#include <string>
using namespace std;

class account {
private:
    string owner;
    float balance;
    float withdrawfee;
   
public:
    account(string name, float fee);
    void write(ostream &out);
    void deposit(float amount); 
    bool withdraw(float amount);
    float getbalance(void);
    float getwithdrawfee(void);
};

class savingsaccount : public account {
private:
    float interestrate;  

public:
    savingsaccount(string name, float fee, float rate);
    void write(ostream &out);
    void addinterest(void);
};

class chequingaccount : public account {
private:
    int remainingfreewithdrawals;  

public:
    chequingaccount(string name, float fee, int numberfree);
    void write(ostream &out);
    bool withdraw(float amount);
};


class savingsaccountplus : public savingsaccount {
private:
    float minimumbalance;  

public:
    savingsaccountplus(string name, float fee, float rate, float minbal);
    bool withdraw(float amount);
    void write(ostream &out);
};


int main(void)
{
    savingsaccount s("joe", 0.50, 0.02);
    chequingaccount c("bob", 0.50, 2);
    savingsaccountplus t("jill", 0.50, 0.02, 1000.00);
    s.deposit(1200.00);
    c.deposit(1200.00);
    t.deposit(1200.00);

    cout << "savings account: \n";
    s.write(cout);
    cout << "\nchequing account: \n";
    c.write(cout);
    cout << "\nsavings account plus: \n";
    t.write(cout);
   
    s.withdraw(100.00);
    s.withdraw(200.00);
    s.withdraw(100.00);
    s.addinterest();

    cout << "\nsavings account: \n";
    s.write(cout);

    c.withdraw(100.00);
    c.withdraw(200.00);
    c.withdraw(100.00);

    cout << "\nchequing account: \n";
    c.write(cout);

    t.withdraw(100.00);
    t.withdraw(200.00);
    t.withdraw(100.00);
    t.addinterest();

    cout << "\nsavings account plus: \n";
    t.write(cout);

   return 0;
}

///////////////////// implementation of account ///////////////////////
account::account(string name, float fee)
{
    owner = name;
    balance = 0;
    withdrawfee = fee;
}

void account::write(ostream &out)
{
    out << "owner: " << owner << "\n";
    out << "balance: " << balance << "\n";
    out << "withdrawfee " << withdrawfee << "\n"; 
}

void account::deposit(float amount)
{
    balance = balance + amount;
}

bool account::withdraw(float amount)
{
    bool result;
    if (amount > balance-withdrawfee) { 
        cout << "Insufficient funds"; 
        result = false;
    } else { 
        balance = balance - amount - withdrawfee;
        result = true;
    }

    return result;
}

float account::getbalance(void)
{
    return balance;
}

float account::getwithdrawfee(void)
{
    return withdrawfee;
}

///////////////////// implementation of savingsaccount ///////////////////////

savingsaccount::savingsaccount(string name, float fee, float rate) : account(name, fee)
{
	interestrate = rate;
}

void savingsaccount::write(ostream& out)
{
	account::write(out);
	out << "interest rate: " << interestrate << endl;
}

void savingsaccount::addinterest(void)
{
	deposit(getbalance() * interestrate);
}

///////////////////// implementation of chequingaccount ///////////////////////

chequingaccount::chequingaccount(string name, float fee, int numberfree) : account(name, fee)
{
	remainingfreewithdrawals = numberfree;
}

void chequingaccount::write(ostream& out)
{
	account::write(out);
	out << "remaining free withdrawals: " << remainingfreewithdrawals << endl;	
}

bool chequingaccount::withdraw(float amount)
{
	if(remainingfreewithdrawals > 0) {
		remainingfreewithdrawals--;
		return(account::withdraw( amount - getwithdrawfee() ));
	}
	else{
		return(account::withdraw(amount));
	}
}

///////////////// implementation of savingsaccountplus ///////////////////////

savingsaccountplus::savingsaccountplus(string name, float fee, float rate, float minbal) 
	: savingsaccount(name, fee, rate)
{
	minimumbalance = minbal;
}

bool savingsaccountplus::withdraw(float amount)
{
	if(getbalance() > minimumbalance) {
		return(account::withdraw( amount - getwithdrawfee() ));
	}
	else{
		return(account::withdraw(amount));
	}	
}

void savingsaccountplus::write(ostream& out)
{
	savingsaccount::write(out);
	out << "minimum balance: " << minimumbalance << endl;
}

/*********************** Question 3 output file ********************/

savings account:
owner: joe
balance: 1200
withdrawfee 0.5
interest rate: 0.02

chequing account:
owner: bob
balance: 1200
withdrawfee 0.5
remaining free withdrawals: 2

savings account plus:
owner: jill
balance: 1200
withdrawfee 0.5
interest rate: 0.02
minimum balance: 1000

savings account:
owner: joe
balance: 814.47
withdrawfee 0.5
interest rate: 0.02

chequing account:
owner: bob
balance: 799.5
withdrawfee 0.5
remaining free withdrawals: 0

savings account plus:
owner: jill
balance: 815.49
withdrawfee 0.5
interest rate: 0.02
minimum balance: 1000

--------------------------------
Process exited after 0.02541 seconds with return value 0
Press any key to continue . . .

/*********************** Question 4 source file ********************/



/*********************** Question 4 output file ********************/
