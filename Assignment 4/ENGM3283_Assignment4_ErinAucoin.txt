/*********************** Question 1 source file ********************/

/* File: cylinder.cpp
   classes which represents points, circles and cylinders in the plane 
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        October 6, 2017
*/

#include <iostream>
#include <fstream>
using namespace std;

class point {
private:
	float x;
	float y;
	
public:
	point(float h, float v); // x = h and y = v

	void write(ostream &out) const; // write a point in the form (x,y)
};

class circle {
private:
	point centre;
	float radius;

public:
	circle(const point &p, float r);

	void write(ostream &out) const;
};

class cylinder {
private:
	circle base;
	float height;

public:
	cylinder(const circle &c, float ht);

	void write(ostream &out) const;
};

int main(void)
{
	point p(1.0, 2.0);

	cout << "p = ";
	p.write(cout);
	cout << endl;

	circle cir(p, 3.0);

	cout << "cir = ";
	cir.write(cout);
	cout << endl;

	cylinder cyl(cir, 7.0);
	cout << "cyl = ";
	cyl.write(cout);
	cout << endl;

	return 0;
}

//////////////////////////// implementation of point //////////////////////

point::point(float h, float v) // x = h and y = v
{
	x = h;
	y = v;
}

void point::write(ostream &out) const // write a point in the form (x,y)
{
	out << "(" << x << "," << y << ")";
}

/////////////////////////// implementation of circle ///////////////////////

circle::circle(const point &p, float r): centre(p)
{
	radius = r;
}

void circle::write(ostream &out) const
{
	out << "(centre = ";
	centre.write(out);
	out << ", radius = " << radius << ")";
}

/////////////////////////// implementation of cylinder ///////////////////////

cylinder::cylinder(const circle &c, float ht): base(c)
{
	height = ht;
}

void cylinder::write(ostream &out) const
{
	out << "(base = ";
	base.write(out);
	out << ", height = " << height << ")";
}


/*********************** Question 1 output file ********************/

p = (1,2)
cir = (centre = (1,2), radius = 3)
cyl = (base = (centre = (1,2), radius = 3), height = 7)

--------------------------------
Process exited after 0.065 seconds with return value 0
Press any key to continue . . .

/*********************** Question 2 source file ********************/

/* File: employeetime.cpp
   Illustrates composition of classes
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        October 6, 2017
*/

#include <iostream>
#include <string>
using namespace std;

class time24 {
private:
	int hour_; // hour between 0 and 23
	int minute_; // minute between 0 and 59

public:
	time24(int h, int m); // constructor
	void write(ostream &out) const; // prints hour:minute to out
};

class employee {
private:
	string name; // last name
	int id; // employee id number
	float salary; // employee salary
	time24 start; // workday start time

public:
	employee(string n, int i, float s, const time24 &t);
	employee(string n, int i, float s, int h, int m);
	void write(ostream &out) const;
};

int main(void)
{
	time24 u(8, 0);
	employee x("Jones", 123, 45000.0, u);
	employee y("Smith", 124, 50000.0, 8, 30);
	
	cout << "x = "; x.write(cout); cout << endl;
	
	cout << "y = "; y.write(cout); cout << endl;
	
	return 0;
}

//////////////////// Implementation of time24 ///////////////////////////

time24::time24(int h, int m)
{
	hour_ = h;
	minute_ = m;
}

void time24::write(ostream &out) const
{
	out << hour_ /10 << hour_ % 10 << ":" << minute_ / 10 << minute_ %10;
}

////////////////////// implementation of employee /////////////////////

employee::employee(string n, int i, float s, const time24 &t): start(t)
{
	name = n;
	id = i;
	salary = s;
}

employee::employee(string n, int i, float s, int h, int m): start(h, m)
{
	name = n;
	id = i;
	salary = s;
}

void employee::write(ostream &out) const
{
	out <<"{" << name << ", " << id << ", " << salary << ", ";
	start.write(out);
	out << "}";
}


/*********************** Question 2 output file ********************/

x = {Jones, 123, 45000, 08:00}
y = {Smith, 124, 50000, 08:30}

--------------------------------
Process exited after 0.05559 seconds with return value 0
Press any key to continue . . .


/*********************** Question 3 source file ********************/

/* File: workforce.cpp
   An employee’s information is stored as an object of type employee
   consisting of name, employee id and employee salary. The methods
   read() and write() are defined for employee.
   Information about a company’s workforce is stored in an object of type
   workforce consisting of the workforce size and a dynamically allocated
   array of employees. The methods read() and write() are defined for
   workforce.
   The read() and write methods for workforce uses the read() and write()
   methods for employee
   
   Programmer:  Erin Aucoin
   Student ID:  B00631829
   Date:        October 6, 2017
*/

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class employee {
private:
	string name; 	// last name
	int id; 		// employee id number
	float salary; 	// employee salary

public:
	employee(string n = "nobody", int i = 0, float s = 0);
	
	void read(istream &in);
	void write(ostream &out) const;
};

class workforce {
private:
	int size; 			// size of workforce
	employee* list; 	// array of employees

public:
	workforce(int n); 	// set size = n and allocate an array of employees
	// big 3 prototypes here
	workforce(const workforce& other);
	~workforce(void);
	workforce& operator=(const workforce& rhs);

	void read(istream &in);
	void write(ostream &out) const;
};

int main(void)
{
	workforce w(5);
	ifstream fin("workforcein.txt"); 	// file containing the list of employees
	ofstream fout("workforceout.txt");
	char ch;
	
	w.read(fin);
	fout << "\nw = \n";
	w.write(fout);

	cout << "C to copy otherwise assign: ";
	cin >> ch;

	if(ch == 'C') {
		workforce v(w); 		// v’s scope is the body of the if
		fout << "\nv = \n";
		v.write(fout);
		// v is destroyed here
	} else {
		workforce u(10); 		// u’s scope is the body of the else
		u = w;
		fout << "\nu = \n";
		u.write(fout);
		// u is destroyed here
	}
	fout << "\nw = \n"; 		// check whether w is still intact
	w.write(fout);
	
	fin.close();
	fout.close();
	
	return 0;
}

////////////////////// implementation of employee ////////////////////////

employee::employee(string n, int i, float s)
{
	name = n;
	id = i;
	salary = s;
}

void employee::read(istream &in)
{
	in >> name >> id >> salary;
}

void employee::write(ostream &out) const
{
	out << name << " " << id << " " << salary << endl;
}

/////////////////////// implementation of workforce //////////////////////

workforce::workforce(int n)
{
	size = n;
	list = new employee [n];
}

workforce::workforce(const workforce& other)
{
	size = other.size;
	list = new employee [size];
	for(int i=0; i<size; i++)
	{
		list[i] = other.list[i];
	}
}

workforce::~workforce(void)
{
	delete [] list;
}

workforce &workforce::operator=(const workforce& rhs)
{
	if(this != &rhs)
	{
		delete [] list;
		size = rhs.size;
		list = new employee[size];
		for(int i=0; i<size; i++)
		{
			list[i] = rhs.list[i];
		}
	}
	return *this;
}

void workforce::read(istream &in)
{
	employee a;
	for(int i = 0; i<size; i++)
	{
		a.read(in);
		list[i] = a;
	}
}

void workforce::write(ostream &out) const
{
	for(int i=0; i<size; i++)
	{
		list[i].write(out);
	}	
}

/*********************** Question 3 output file ********************/

//////////Copying\\\\\\\\\\

C to copy otherwise assign: C

--------------------------------
Process exited after 7.694 seconds with return value 0
Press any key to continue . . .

//////////workforceout.txt\\\\\\\\\\

w = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000

v = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000

w = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000

//////////Assigning\\\\\\\\\\

C to copy otherwise assign: A

--------------------------------
Process exited after 2.298 seconds with return value 0
Press any key to continue . . .

//////////workforceout.txt\\\\\\\\\\

w = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000

u = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000

w = 
Smith 123 34000
Jones 189 38000
Black 342 45000
White 111 49000
Green 200 35000
